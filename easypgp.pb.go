// Code generated by protoc-gen-go.
// source: easypgp.proto
// DO NOT EDIT!

/*
Package easypgp is a generated protocol buffer package.

It is generated from these files:
	easypgp.proto

It has these top-level messages:
	CipherWithSignature
	EncryptedMessage
	DecryptedMessage
*/
package easypgp

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CipherWithSignature struct {
	Cipher    string `protobuf:"bytes,1,opt,name=cipher" json:"cipher,omitempty"`
	Signature string `protobuf:"bytes,2,opt,name=signature" json:"signature,omitempty"`
}

func (m *CipherWithSignature) Reset()                    { *m = CipherWithSignature{} }
func (m *CipherWithSignature) String() string            { return proto.CompactTextString(m) }
func (*CipherWithSignature) ProtoMessage()               {}
func (*CipherWithSignature) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CipherWithSignature) GetCipher() string {
	if m != nil {
		return m.Cipher
	}
	return ""
}

func (m *CipherWithSignature) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

type EncryptedMessage struct {
	Content      *CipherWithSignature `protobuf:"bytes,1,opt,name=content" json:"content,omitempty"`
	SenderPubkey string               `protobuf:"bytes,2,opt,name=sender_pubkey,json=senderPubkey" json:"sender_pubkey,omitempty"`
	Timestamp    uint64               `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *EncryptedMessage) Reset()                    { *m = EncryptedMessage{} }
func (m *EncryptedMessage) String() string            { return proto.CompactTextString(m) }
func (*EncryptedMessage) ProtoMessage()               {}
func (*EncryptedMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *EncryptedMessage) GetContent() *CipherWithSignature {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *EncryptedMessage) GetSenderPubkey() string {
	if m != nil {
		return m.SenderPubkey
	}
	return ""
}

func (m *EncryptedMessage) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type DecryptedMessage struct {
	Text        string `protobuf:"bytes,1,opt,name=text" json:"text,omitempty"`
	SignatureOk bool   `protobuf:"varint,2,opt,name=signature_ok,json=signatureOk" json:"signature_ok,omitempty"`
}

func (m *DecryptedMessage) Reset()                    { *m = DecryptedMessage{} }
func (m *DecryptedMessage) String() string            { return proto.CompactTextString(m) }
func (*DecryptedMessage) ProtoMessage()               {}
func (*DecryptedMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *DecryptedMessage) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *DecryptedMessage) GetSignatureOk() bool {
	if m != nil {
		return m.SignatureOk
	}
	return false
}

func init() {
	proto.RegisterType((*CipherWithSignature)(nil), "easypgp.CipherWithSignature")
	proto.RegisterType((*EncryptedMessage)(nil), "easypgp.EncryptedMessage")
	proto.RegisterType((*DecryptedMessage)(nil), "easypgp.DecryptedMessage")
}

func init() { proto.RegisterFile("easypgp.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 228 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4d, 0x4d, 0x2c, 0xae,
	0x2c, 0x48, 0x2f, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x87, 0x72, 0x95, 0xbc, 0xb9,
	0x84, 0x9d, 0x33, 0x0b, 0x32, 0x52, 0x8b, 0xc2, 0x33, 0x4b, 0x32, 0x82, 0x33, 0xd3, 0xf3, 0x12,
	0x4b, 0x4a, 0x8b, 0x52, 0x85, 0xc4, 0xb8, 0xd8, 0x92, 0xc1, 0xc2, 0x12, 0x8c, 0x0a, 0x8c, 0x1a,
	0x9c, 0x41, 0x50, 0x9e, 0x90, 0x0c, 0x17, 0x67, 0x31, 0x4c, 0x91, 0x04, 0x13, 0x58, 0x0a, 0x21,
	0xa0, 0xd4, 0xcb, 0xc8, 0x25, 0xe0, 0x9a, 0x97, 0x5c, 0x54, 0x59, 0x50, 0x92, 0x9a, 0xe2, 0x9b,
	0x5a, 0x5c, 0x9c, 0x98, 0x9e, 0x2a, 0x64, 0xc6, 0xc5, 0x9e, 0x9c, 0x9f, 0x57, 0x92, 0x9a, 0x57,
	0x02, 0x36, 0x8b, 0xdb, 0x48, 0x46, 0x0f, 0xe6, 0x16, 0x2c, 0x36, 0x07, 0xc1, 0x14, 0x0b, 0x29,
	0x73, 0xf1, 0x16, 0xa7, 0xe6, 0xa5, 0xa4, 0x16, 0xc5, 0x17, 0x94, 0x26, 0x65, 0xa7, 0x56, 0x42,
	0xad, 0xe3, 0x81, 0x08, 0x06, 0x80, 0xc5, 0x40, 0xee, 0x29, 0xc9, 0xcc, 0x4d, 0x2d, 0x2e, 0x49,
	0xcc, 0x2d, 0x90, 0x60, 0x56, 0x60, 0xd4, 0x60, 0x09, 0x42, 0x08, 0x28, 0x79, 0x72, 0x09, 0xb8,
	0xa4, 0xa2, 0x39, 0x47, 0x88, 0x8b, 0xa5, 0x24, 0xb5, 0xa2, 0x04, 0xea, 0x2f, 0x30, 0x5b, 0x48,
	0x91, 0x8b, 0x07, 0xee, 0x89, 0xf8, 0xfc, 0x6c, 0xb0, 0x4d, 0x1c, 0x41, 0xdc, 0x70, 0x31, 0xff,
	0xec, 0x24, 0x36, 0x70, 0xb8, 0x19, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x0c, 0x2e, 0x89, 0xcb,
	0x48, 0x01, 0x00, 0x00,
}
